blueprint:
  name: Reolink Doorbell on Person Detection
  description: Take snapshots, analyze with AI, and send notifications on motion detection
  domain: automation
  input:
    camera_device:
      name: Camera
      description: The camera which creates the snapshot
      selector:
        entity:
          domain: camera    
    motion_sensor:
      name: Motion sensor
      description: The sensor which triggers the snapshot creation
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
    ai_prompt:
      name: AI Prompt
      description: The prompt to use for AI analysis
      selector:
        text:
      default: >
        Person has been detected, compare and very briefly describe what you see
        in the following sequence of images from my {{ camera_name }} camera and my family images. What do you
        think the person is my family? If not my family member, describe
        them in detail. Do not describe stationary objects or buildings. If you
        see the person is my family member, reply with "Camera has detected person who is the family member". Your message
        needs to be short enough to fit in a phone notification.
    num_snapshots:
      name: Number of Snapshots
      description: Number of snapshots to take (between 1 and 5)
      selector:
        number:
          min: 1
          max: 5
          unit_of_measurement: snapshots
      default: 3      
    condition_auto:
      name: Add Condition(s) to run this Automation
      description: Add conditions if needed to run this automation at all. Note, if conditions return `false`, no actions will fire.
      default: []
      selector:
        condition: {}

trigger:
  platform: state
  entity_id: !input motion_sensor
  to: 'on'

variables:
  camera_device: !input camera_device
  camera_name: "{{ state_attr(camera_device, 'friendly_name') }}"
  camera_path: "{{ state_attr(camera_device, 'friendly_name') | lower | replace(' ', '_') }}"
  motion_sensor: !input motion_sensor
  motion_name: "{{ state_attr(motion_sensor, 'friendly_name') }}"
  num_snapshots: !input num_snapshots
  snapshot_access_file_path: '/local/snapshots/{{ camera_path }}_snapshot1.jpg'
  ai_prompt: !input ai_prompt
  condition_auto: !input condition_auto

action:
- if:
  - condition: !input condition_auto
  then:
  - repeat:
      count: "{{ num_snapshots }}"
      sequence:
        - service: camera.snapshot
          data:
            filename: "./www/snapshots/{{ camera_path }}_snapshot{{ repeat.index }}.jpg"
          target:
            entity_id: "{{ camera_device }}"
        - delay:
            milliseconds: 5000
  - service: google_generative_ai_conversation.generate_content
    data:
      prompt: "{{ ai_prompt }}"
      image_filename: >
        {% set snap_count = 3 %}
        {% set ns = namespace(images=[]) %}
        {% for i in range(1, snap_count + 1) %}
          {% set image = "./www/snapshots/" ~ camera_path ~ "_snapshot" ~ i ~ ".jpg" %}
          {% set ns.images = ns.images + [image] %}
        {% endfor %}
        {% set image = "./www/snapshots/my_family_1.jpg" %}
        {% set image = "./www/snapshots/my_family_2.jpg" %}
        {{ ns.images }}
    response_variable: generated_content
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ generated_content['text'] != 'Camera has detected person who is the family member. Testing' }} 
        sequence:
          - action: telegram_bot.send_message
            metadata: {}
            data:
              title: "{{ motion_name }} Detected"
              message: "{{ generated_content['text'] }}"
          - action: telegram_bot.send_photo
            metadata: {}
            data:
              file: ./www/snapshots/{{ camera_path }}_snapshot1.jpg
mode: single
